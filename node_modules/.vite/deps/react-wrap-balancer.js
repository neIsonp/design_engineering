import {
  __toESM,
  require_react
} from "./chunk-SA4Q2NBN.js";

// node_modules/react-wrap-balancer/dist/index.mjs
var import_react = __toESM(require_react(), 1);
"use client";
var d = "__wrap_b";
var f = "__wrap_o";
var m = typeof window == "undefined";
var p = m ? import_react.default.useEffect : import_react.default.useLayoutEffect;
var y = (o, n, e) => {
  e = e || document.querySelector(`[data-br="${o}"]`);
  let s = e.parentElement, c = (_) => e.style.maxWidth = _ + "px";
  e.style.maxWidth = "";
  let t = s.clientWidth, i = s.clientHeight, a = t / 2 - 0.25, l = t + 0.5, u;
  if (t) {
    for (; a + 1 < l; )
      u = Math.round((a + l) / 2), c(u), s.clientHeight === i ? l = u : a = u;
    c(l * n + t * (1 - n));
  }
  e.__wrap_o || (e.__wrap_o = new ResizeObserver(() => {
    self.__wrap_b(0, +e.dataset.brr, e);
  })).observe(s);
};
var v = y.toString();
var b = (o, n = "") => import_react.default.createElement("script", { suppressHydrationWarning: true, dangerouslySetInnerHTML: { __html: (o ? "" : `self.${d}=${v};`) + n } });
var E = import_react.default.createContext(false);
var x = ({ children: o }) => import_react.default.createElement(E.Provider, { value: true }, b(false), o);
var R = ({ as: o = "span", ratio: n = 1, children: e, ...s }) => {
  let c = import_react.default.useId(), t = import_react.default.useRef(), i = import_react.default.useContext(E);
  return p(() => {
    t.current && (self[d] = y)(0, n, t.current);
  }, [e, n]), p(() => () => {
    if (!t.current)
      return;
    let a = t.current[f];
    !a || (a.disconnect(), delete t.current[f]);
  }, []), e && !Array.isArray(e) && typeof e == "object" && "type" in e && typeof e.type == "string" && e.type !== "span" && console.warn(`<Balancer> should not wrap <${e.type}> inside. Instead, it should directly wrap text or inline nodes.

Try changing this:
  <Balancer><${e.type}>content</${e.type}></Balancer>
To:
  <${e.type}><Balancer>content</Balancer></${e.type}>`), import_react.default.createElement(import_react.default.Fragment, null, import_react.default.createElement(o, { ...s, "data-br": c, "data-brr": n, ref: t, style: { display: "inline-block", verticalAlign: "top", textDecoration: "inherit" }, suppressHydrationWarning: true }, e), b(i, `self.${d}("${c}",${n})`));
};
if (!m && true) {
  let o = document.querySelector("[data-next-hide-fouc]");
  if (o) {
    let n = (s) => {
      for (let c of s)
        for (let t of Array.from(c.removedNodes)) {
          if (t !== o)
            continue;
          e.disconnect();
          let i = document.querySelectorAll("[data-br]");
          for (let a of Array.from(i))
            self[d](0, +a.dataset.brr, a);
        }
    }, e = new MutationObserver(n);
    e.observe(document.head, { childList: true });
  }
}
var S = R;
export {
  x as Provider,
  S as default
};
//# sourceMappingURL=react-wrap-balancer.js.map
